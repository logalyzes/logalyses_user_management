// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v3.19.1
// source: logs.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { LogsMessages_Log } from "./logsCollector";

export interface FilterableAvaliabilities {
  name: string;
  contain: number;
}

export interface Filterable {
  name: string;
  keywords: FilterableAvaliabilities[];
}

export interface Index {
  name: string;
  size: number;
}

export interface ListIndexesRequest {
}

export interface ListIndexesResponse {
  indexes: Index[];
}

export interface LogsRequest {
  page: number;
  pageSize: number;
  index: string;
  /** Filter By */
  filters: FilterableAvaliabilities[];
}

export interface LogsResponse {
  logs: LogsMessages_Log[];
  page: number;
  pageSize: number;
  total: number;
  totalPage: number;
}

export interface LogRequest {
  id: string;
}

export interface LogResponse {
  log?: LogsMessages_Log | undefined;
}

function createBaseFilterableAvaliabilities(): FilterableAvaliabilities {
  return { name: "", contain: 0 };
}

export const FilterableAvaliabilities = {
  encode(message: FilterableAvaliabilities, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.contain !== 0) {
      writer.uint32(16).int64(message.contain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FilterableAvaliabilities {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterableAvaliabilities();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.contain = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterableAvaliabilities {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      contain: isSet(object.contain) ? globalThis.Number(object.contain) : 0,
    };
  },

  toJSON(message: FilterableAvaliabilities): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.contain !== 0) {
      obj.contain = Math.round(message.contain);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterableAvaliabilities>, I>>(base?: I): FilterableAvaliabilities {
    return FilterableAvaliabilities.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterableAvaliabilities>, I>>(object: I): FilterableAvaliabilities {
    const message = createBaseFilterableAvaliabilities();
    message.name = object.name ?? "";
    message.contain = object.contain ?? 0;
    return message;
  },
};

function createBaseFilterable(): Filterable {
  return { name: "", keywords: [] };
}

export const Filterable = {
  encode(message: Filterable, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.keywords) {
      FilterableAvaliabilities.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Filterable {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keywords.push(FilterableAvaliabilities.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Filterable {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      keywords: globalThis.Array.isArray(object?.keywords)
        ? object.keywords.map((e: any) => FilterableAvaliabilities.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Filterable): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.keywords?.length) {
      obj.keywords = message.keywords.map((e) => FilterableAvaliabilities.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Filterable>, I>>(base?: I): Filterable {
    return Filterable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Filterable>, I>>(object: I): Filterable {
    const message = createBaseFilterable();
    message.name = object.name ?? "";
    message.keywords = object.keywords?.map((e) => FilterableAvaliabilities.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIndex(): Index {
  return { name: "", size: 0 };
}

export const Index = {
  encode(message: Index, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.size !== 0) {
      writer.uint32(16).int64(message.size);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Index {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.size = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Index {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
    };
  },

  toJSON(message: Index): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.size !== 0) {
      obj.size = Math.round(message.size);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Index>, I>>(base?: I): Index {
    return Index.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Index>, I>>(object: I): Index {
    const message = createBaseIndex();
    message.name = object.name ?? "";
    message.size = object.size ?? 0;
    return message;
  },
};

function createBaseListIndexesRequest(): ListIndexesRequest {
  return {};
}

export const ListIndexesRequest = {
  encode(_: ListIndexesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListIndexesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIndexesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListIndexesRequest {
    return {};
  },

  toJSON(_: ListIndexesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListIndexesRequest>, I>>(base?: I): ListIndexesRequest {
    return ListIndexesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListIndexesRequest>, I>>(_: I): ListIndexesRequest {
    const message = createBaseListIndexesRequest();
    return message;
  },
};

function createBaseListIndexesResponse(): ListIndexesResponse {
  return { indexes: [] };
}

export const ListIndexesResponse = {
  encode(message: ListIndexesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.indexes) {
      Index.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListIndexesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIndexesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.indexes.push(Index.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIndexesResponse {
    return {
      indexes: globalThis.Array.isArray(object?.indexes) ? object.indexes.map((e: any) => Index.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListIndexesResponse): unknown {
    const obj: any = {};
    if (message.indexes?.length) {
      obj.indexes = message.indexes.map((e) => Index.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListIndexesResponse>, I>>(base?: I): ListIndexesResponse {
    return ListIndexesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListIndexesResponse>, I>>(object: I): ListIndexesResponse {
    const message = createBaseListIndexesResponse();
    message.indexes = object.indexes?.map((e) => Index.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLogsRequest(): LogsRequest {
  return { page: 0, pageSize: 0, index: "", filters: [] };
}

export const LogsRequest = {
  encode(message: LogsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.index !== "") {
      writer.uint32(26).string(message.index);
    }
    for (const v of message.filters) {
      FilterableAvaliabilities.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LogsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.index = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filters.push(FilterableAvaliabilities.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogsRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      filters: globalThis.Array.isArray(object?.filters)
        ? object.filters.map((e: any) => FilterableAvaliabilities.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LogsRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.filters?.length) {
      obj.filters = message.filters.map((e) => FilterableAvaliabilities.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogsRequest>, I>>(base?: I): LogsRequest {
    return LogsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogsRequest>, I>>(object: I): LogsRequest {
    const message = createBaseLogsRequest();
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.index = object.index ?? "";
    message.filters = object.filters?.map((e) => FilterableAvaliabilities.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLogsResponse(): LogsResponse {
  return { logs: [], page: 0, pageSize: 0, total: 0, totalPage: 0 };
}

export const LogsResponse = {
  encode(message: LogsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.logs) {
      LogsMessages_Log.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.total !== 0) {
      writer.uint32(32).int32(message.total);
    }
    if (message.totalPage !== 0) {
      writer.uint32(40).int32(message.totalPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LogsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.logs.push(LogsMessages_Log.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.total = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.totalPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogsResponse {
    return {
      logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => LogsMessages_Log.fromJSON(e)) : [],
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      totalPage: isSet(object.totalPage) ? globalThis.Number(object.totalPage) : 0,
    };
  },

  toJSON(message: LogsResponse): unknown {
    const obj: any = {};
    if (message.logs?.length) {
      obj.logs = message.logs.map((e) => LogsMessages_Log.toJSON(e));
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.totalPage !== 0) {
      obj.totalPage = Math.round(message.totalPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogsResponse>, I>>(base?: I): LogsResponse {
    return LogsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogsResponse>, I>>(object: I): LogsResponse {
    const message = createBaseLogsResponse();
    message.logs = object.logs?.map((e) => LogsMessages_Log.fromPartial(e)) || [];
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.total = object.total ?? 0;
    message.totalPage = object.totalPage ?? 0;
    return message;
  },
};

function createBaseLogRequest(): LogRequest {
  return { id: "" };
}

export const LogRequest = {
  encode(message: LogRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LogRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: LogRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogRequest>, I>>(base?: I): LogRequest {
    return LogRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogRequest>, I>>(object: I): LogRequest {
    const message = createBaseLogRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseLogResponse(): LogResponse {
  return { log: undefined };
}

export const LogResponse = {
  encode(message: LogResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.log !== undefined) {
      LogsMessages_Log.encode(message.log, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LogResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.log = LogsMessages_Log.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogResponse {
    return { log: isSet(object.log) ? LogsMessages_Log.fromJSON(object.log) : undefined };
  },

  toJSON(message: LogResponse): unknown {
    const obj: any = {};
    if (message.log !== undefined) {
      obj.log = LogsMessages_Log.toJSON(message.log);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogResponse>, I>>(base?: I): LogResponse {
    return LogResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogResponse>, I>>(object: I): LogResponse {
    const message = createBaseLogResponse();
    message.log = (object.log !== undefined && object.log !== null)
      ? LogsMessages_Log.fromPartial(object.log)
      : undefined;
    return message;
  },
};

export type LogsServiceService = typeof LogsServiceService;
export const LogsServiceService = {
  /** Listing avaliable indexes */
  listIndexes: {
    path: "/LogsService/listIndexes",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListIndexesRequest) => Buffer.from(ListIndexesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListIndexesRequest.decode(value),
    responseSerialize: (value: ListIndexesResponse) => Buffer.from(ListIndexesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListIndexesResponse.decode(value),
  },
  /** List Logs */
  list: {
    path: "/LogsService/list",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LogsRequest) => Buffer.from(LogsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => LogsRequest.decode(value),
    responseSerialize: (value: LogsResponse) => Buffer.from(LogsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => LogsResponse.decode(value),
  },
  detail: {
    path: "/LogsService/detail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LogRequest) => Buffer.from(LogRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => LogRequest.decode(value),
    responseSerialize: (value: LogResponse) => Buffer.from(LogResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => LogResponse.decode(value),
  },
} as const;

export interface LogsServiceServer extends UntypedServiceImplementation {
  /** Listing avaliable indexes */
  listIndexes: handleUnaryCall<ListIndexesRequest, ListIndexesResponse>;
  /** List Logs */
  list: handleUnaryCall<LogsRequest, LogsResponse>;
  detail: handleUnaryCall<LogRequest, LogResponse>;
}

export interface LogsServiceClient extends Client {
  /** Listing avaliable indexes */
  listIndexes(
    request: ListIndexesRequest,
    callback: (error: ServiceError | null, response: ListIndexesResponse) => void,
  ): ClientUnaryCall;
  listIndexes(
    request: ListIndexesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListIndexesResponse) => void,
  ): ClientUnaryCall;
  listIndexes(
    request: ListIndexesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListIndexesResponse) => void,
  ): ClientUnaryCall;
  /** List Logs */
  list(request: LogsRequest, callback: (error: ServiceError | null, response: LogsResponse) => void): ClientUnaryCall;
  list(
    request: LogsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LogsResponse) => void,
  ): ClientUnaryCall;
  list(
    request: LogsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LogsResponse) => void,
  ): ClientUnaryCall;
  detail(request: LogRequest, callback: (error: ServiceError | null, response: LogResponse) => void): ClientUnaryCall;
  detail(
    request: LogRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LogResponse) => void,
  ): ClientUnaryCall;
  detail(
    request: LogRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LogResponse) => void,
  ): ClientUnaryCall;
}

export const LogsServiceClient = makeGenericClientConstructor(LogsServiceService, "LogsService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): LogsServiceClient;
  service: typeof LogsServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
